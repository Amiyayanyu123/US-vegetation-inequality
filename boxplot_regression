######################
percentile = quantile(data$DEM, prob=c(0.2,0.4,0.6,0.8))

#Q1 = data[data$DEM <= percentile[1],]$country_number
#Q2 = data[data$DEM > percentile[1] & data$DEM <= percentile[2],]$country_number
#Q3 = data[data$DEM > percentile[2] & data$DEM <= percentile[3],]$country_number
#Q4 = data[data$DEM > percentile[3] ,]$country_number
#all = merge(Q1,Q2,Q3,Q4)
ApplyQuintiles1 <- function(x) {
  cut(x, breaks=c(quantile(Data$white, probs = seq(0, 1, by = 0.10))), 
      labels=c("0-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100"), include.lowest=TRUE)
}
Data$W <- sapply(Data$white, ApplyQuintiles1)
ApplyQuintiles2 <- function(x) {
  cut(x, breaks=c(quantile(Data$POC, probs = seq(0, 1, by = 0.10))), 
      labels=c("0-10","10-20","20-30","30-40","40-50","50-60","60-70","70-80","80-90","90-100"), include.lowest=TRUE)
}
Data$B <- sapply(Data$POC, ApplyQuintiles2)
White = cbind(Data[,23],Data[,24])
colnames(White) = c("NDVI_Z_Change","Group")
White = transform(White, Race = "White")

Black = cbind(Data[,23],Data[,25])
colnames(Black) = c("NDVI_Z_Change","Group")
Black = transform(Black, Race = "POC")

all = rbind(White,Black)

data_summary <- function(x) {
  m <- mean(x)
  ymin <- m-sd(x)
  ymax <- m+sd(x)
  return(c(y=m,ymin=ymin,ymax=ymax))
}

stderr <- function(x) {
  sqrt(var(x[!is.na(x)]) / length(x[!is.na(x)]))
}

# Then create a wrapper to *stderr* to make it compatible with *stat_summary*

# see values shown in ?stat_summary
my.stderr <- function(x) {
  meany <- mean(x)
  ymin  <- mean(x) - stderr(x)
  ymax  <- mean(x) + stderr(x)
  # assemble the named output
  out <- c(y = meany, ymin = ymin, ymax = ymax)
  return(out)
}

lm_eqn <- function(df){
  # browser()
  m <- lm(NDVI_Z_Change ~ Group, df)
  a <- coef(m)[1]
  a <- ifelse(sign(a) >= 0, 
              paste0(" + ", format(a, digits = 4)), 
              paste0(" - ", format(-a, digits = 4))  )
  eq1 <- substitute( paste( italic(y) == b, italic(x), a ), 
                     list(a = a, 
                          b = format(coef(m)[2], digits = 4)))
  eq2 <- substitute( paste( italic(R)^2 == r2 ), 
                     list(r2 = format(summary(m)$r.squared, digits = 3)))
  c( as.character(as.expression(eq1)), as.character(as.expression(eq2)))
}

labels <- lm_eqn(all)

pdf("white_POC_NDVI_Z.pdf",  width=8, height=5)
ggplot(all, aes(x=factor(Group), y=NDVI_Z_Change,fill=Race,group = Race))+
  stat_summary(fun.data = "mean_cl_boot",
               geom = "pointrange",
               color = "grey",
               shape = 21,
               size = 1)+
  geom_smooth(data = subset(all, Race== "White" ),method='lm', aes(x=factor(Group), y=NDVI_Z_Change),color ="#77AF9C",size = 1.5) +
geom_smooth(data = subset(all, Race== "POC" ),method='lm', aes(x=factor(Group), y=NDVI_Z_Change),color ="#F68657",size = 1.5) +
scale_fill_manual(values=c("#F68657","#77AF9C"))+
  theme(axis.title=element_text(size=20,face="bold"),
        axis.text =element_text(size=17, face="bold"),
        panel.background=element_rect(colour="black",fill=NA),
        panel.grid.minor=element_blank(),
        text=element_text(size=20,face="bold"),
        legend.position="right",
        legend.background=element_rect(colour=NA,fill=NA),
        axis.ticks=element_line(colour="black"))+ 
  xlab("Group of Race")+ylab("NDVI-Zscores Change")+
  theme(legend.position="none")
dev.off()


##################################

ggplot(data = subset(all, Race== "White" ), aes(x=factor(Group), y=NDVI_Z_Change))+
  stat_summary(fun.data = "mean_cl_boot",
               geom = "pointrange",
               color = "grey",
               fill = "black",
               shape = 21,
               size = 1)+geom_smooth(aes(x=as.integer(Group),y=NDVI_Z_Change),method="lm",color = "black",size = 1)+
  theme(axis.title=element_text(size=20,face="bold",  family="Times"),
        axis.text =element_text(size=17, face="bold", family="Times"),
        panel.background=element_rect(colour="black",fill=NA),
        panel.grid.minor=element_blank(),
        text=element_text(size=20,face="bold",family="Times"),
        legend.position="right",
        legend.background=element_rect(colour=NA,fill=NA),
        axis.ticks=element_line(colour="black"))+ 
  xlab("Percentile of qiege (%)")+ylab("Number of village")+
  theme(legend.position="none")
